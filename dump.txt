

    public void add(T toAdd) {

        node = new TreeNode(toAdd);

        // Check root
        if (rootNode == null) {

            rootNode = new TreeNode(toAdd);
        }

        addHelper(rootNode, toAdd);
    }


    // Since we cannot do operator overloading like we can in
    // C++, we need to extends the comparable class so we can
    // Directly compare objects correct.


    // Helper function above that is recursive
    // This is so we can focus on only being recursive and adding
    // the node while the above method takes care of single items
    private void addHelper(TreeNode lastRoot, TreeNode node) {

        // Currently using int's here so we need to see
        // which is bigger
        // Uses the compareTo custom method above.

        if(lastRoot.compareTo(node) > 0) {

            if(lastRoot.leftNode == null) {

                // We currently don't have a left node for the root
                // so let's add it and return
                lastRoot.leftNode = node;
            }
            else {

                // Otherwise we recursively call this function
                // again to continue adding to the tree.
                addHelper(lastRoot.leftNode, node);
            }

        }
        else {  // Let us check the right side now

            if(lastRoot.rightNode == null) {

                lastRoot.rightNode = node;
            }
            else {

                // Recursively call this function
                // for the right side of the node.
                addHelper(lastRoot.rightNode, node);
            }

        }

    }

    // -- Printing trees  -- //

    // This traversed the tree structure in order by
    // starting with the first root node
    // it then calls a helper method to print things
    // in the actual order.
    public void traverseInOrder() {

        traverseInOrderHelper(rootNode);
        System.out.println("");
    }

    public void traverseInOrderHelper(TreeNode lastRoot) {

        if(lastRoot == null) {

            return;
        }

        traverseInOrderHelper(lastRoot.leftNode);
        System.out.println(rootNode.toInsert+", ");
        traverseInOrderHelper(lastRoot.rightNode);

    }

    // Keeping this as generic as we can so we can pass
    // multiple types to it in the future
// Create a new list to store the nodes in the tree
        List<T> treeList = new ArrayList<T>();

        // Create a FIFO queue containing a linked list of all of our nodes
        // for easy printing
        Queue<TreeNode<T>> treeQueue = new LinkedList<TreeNode<T>>();

        // Add the first node to the queue
        treeQueue.add(rootNode);

        while(!treeQueue.isEmpty()) {

            // Gets the head of the queue
            TreeNode<T> node = treeQueue.poll();

            // Adds it to the list
            treeList.add(node.value);

            if(node.leftNode != null) {

                treeQueue.add(node.leftNode);
            }
            if(node.rightNode != null) {

                treeQueue.add(node.rightNode);

            }
        }

        return treeList;

            // This traversed the tree structure in order by
            // starting with the first root node
            // it then calls a helper method to print things
            // in the actual order.
            public static <T> void printTree(List<T> treeList) {

                for(T i: treeList) {

                    System.out.println(i);
                }
            }


        /*
        // Populate the tree
        BinaryTrees<Integer> tree = new BinaryTrees<Integer>(100);
        tree.add(50);
        tree.add(40);
        tree.add(30);
        tree.add(20);
        tree.add(500);
        tree.add(10);
        tree.add(750);

        // Get the root node
        TreeNode rootNode = tree.getNode();

        tree.printInOrder(rootNode);
        System.out.println("---");
        tree.printRevOrder(rootNode);

        */

        //String testFrac = "3/4";
       // String test2Frac = "2/3";

        /*
        String badFrac = "1/2/3";
        String manyFrac = "1/2 3/4 5/8 3/2 4/9 7/16 5/32 1/8";
        String numString = "3 4 100 9 50 23";
        Fraction myFrac = null;

        // Create list from string of fracs
        List<String> splitter = Arrays.asList(manyFrac.split("\\s+"));
        Queue<Fraction> fracQ = new LinkedList<Fraction>();

        List<String> numSplit = Arrays.asList(numString.split("\\s+"));
        Queue<String> numQ = new LinkedList<String>();

        // Loop through num list and add to queue of numbers
        for(String i : numSplit) {

            //numQ.add(Integer.parseInt(i));
            //numQ.add(i);
            numQ.add(i);

        }

        for(String i : numQ) {

            System.out.println(i);
        }
        */
/*
        // Create new binary tree based on Integers
        BinaryTrees<Integer> bTree = new BinaryTrees<Integer>(numQ.poll());
        TreeNode rootNode = bTree.getNode();

        String inOrder = bTree.printInOrder(rootNode);
        System.out.println(inOrder);
        System.out.println("---");
        String revOrder = bTree.printRevOrder(rootNode);
        System.out.println(revOrder);

*/
        // Comparing Fractions
        //Fraction myFrac1 = new Fraction(testFrac);
        //Fraction myFrac2 = new Fraction(test2Frac);


        /* Comparison test
        if(myFrac1.compareTo(myFrac2) > 0) {

            System.out.println(myFrac1 + " Is Bigger");
        }
        else {

            System.out.println(myFrac2 + " Is Bigger");
        }
        */


        /* -- Bad Fraction Test
        try {

             myFrac = new Fraction(badFrac);
        }
        catch (NumberFormatException e) {

            System.out.println("Non Numeric Input");
        }
        */

        /*
        for(String frac : splitter) {

            // Crete single fraction object
            //System.out.println(frac);
            try {

                myFrac = new Fraction(frac);
            }
            catch(NumberFormatException e) {

                System.out.println("Non Numeric Input");
            }

            // add created fractions to fraction list
            fracList.add(myFrac);
        }

        // Print list of fractions
        for(Fraction f : fracList) {

            System.out.println(f.toString());
        }

    */


        // Create Binary Tree of fractions - test
        //BinaryTrees<Fraction> ftree = new BinaryTrees<Fraction>(new Fraction());

       // TreeNode rootNode = ftree.getNode();
        //ftree.printInOrder(rootNode);
        //System.out.println("---");
        //ftree.printRevOrder(rootNode);

/*
        for(String frac : splitter) {

            // Crete single fraction object
            //System.out.println(frac);
            try {

                myFrac = new Fraction(frac);
            }
            catch(NumberFormatException e) {

                //System.out.println("Non Numeric Input");
                JOptionPane.showMessageDialog(null, "Non Numeric Input", "Error!", JOptionPane.ERROR_MESSAGE);
            }

            // Add new fractions to the queue
            fracQ.add(myFrac);

        }

        // Start with the first element we put into the queue
        // Remove it from the head, making the next the head of the quee
        BinaryTrees<Fraction> ftree = new BinaryTrees<Fraction>(fracQ.poll());

        // SInce we made the queue using a linked list, we follow
        // the exact order we put them in.
        for(Fraction frac : fracQ) {

            ftree.add(frac);

        }

        TreeNode rootNode = ftree.getNode();
        String inOrder;
        String revOrder;

        inOrder = ftree.printInOrder(rootNode);
        System.out.println(inOrder);
        System.out.println("---");
        revOrder = ftree.printRevOrder(rootNode);
        System.out.println(revOrder);
*/


// This si the method to insert a new node in the tree, though it's not
    // required to actually use

    public void insertNode(TreeNode<T> node, T value) {

        if(value.compareTo(node.value) < 0) {

            if(node.leftNode != null) {

                insertNode(node.leftNode, value);
            }
            else {

                node.leftNode = new TreeNode<T>(value, node.leftNode, node.rightNode);
            }
        }
        else {

            if(node.rightNode != null) {

                insertNode(node.rightNode, value);
            }
            else {

                node.rightNode = new TreeNode<T>(value, node.leftNode, node.rightNode);
            }
        }


    }
    }

